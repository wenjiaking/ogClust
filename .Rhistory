postprob.matrix<-sapply(d,function(x) as.numeric(x/sum(x)))
grp_assign_test=apply(postprob.matrix,2,which.max)
cluster.test<-grp_assign_test
index1<-which(cluster.test==1)
index2<-which(cluster.test==2)
if(coef>0){
cluster.test[index2]<-1
cluster.test[index1]<-2
}
data<-data.frame(Y=Y.test,cluster=cluster.test,Y.ind=delta.test)
surv_object <- Surv(time = data$Y,
event = data$Y.ind)
fit.os<-surv_fit(surv_object ~ data$cluster,
data = data)
p8<-ggsurvplot(fit.os, data = data,legend.title="Clusters",size=2,censor=FALSE
,palette=1:2,title = "",risk.table=F,linetype = "strata",
pval=F,conf.int = F,xlab = "",legend="none",ylab="")%++%theme_bw()
p8<-ggpar(p8,
font.main = c(40, "bold"),
font.x = c(40, "bold"),
font.y = c(40, "bold"),
font.caption = c(40, "bold"),
font.legend = c(40, "bold"),
font.tickslab = c(40, "bold"))
p8<-p8%++%theme(legend.position="none",panel.border = element_rect(colour = "black",size=2))
p8<-as.ggplot(p8$plot)
data1<-data.frame(group=cluster.test,Y.ind=delta.test,Y=Y.test,x=Z.test)
mod.cox1<-coxph(Surv(Y, Y.ind) ~ as.factor(group)+x, data = data1)
mod.cox2<-coxph(Surv(Y, Y.ind) ~ x, data = data1)
mod.anova<-anova(mod.cox1,mod.cox2)
F.test.PMBC<-mod.anova$Chisq[2]
p.test.PMBC<-mod.anova$`Pr(>|Chi|)`[2]
pred<-rep(NA,length(cluster.test))
for(i in 1:K){
data.temp<-data.frame(Y=Y[which(cluster.train==i)],x=Z[which(cluster.train==i)],
delta=delta.train[which(cluster.train==i)])
mod.lm<-survreg(Surv(Y,delta)~x,dist="loglogistic",data=data.temp)
pred[which(cluster.test==i)]<-predict(mod.lm,newdata = data.frame(x=Z.test[which(cluster.test==i)]))
}
cindex.PMBC.test<-concordance.index(x=1/as.numeric(pred), surv.time=Y.test, surv.event=delta.test, method="noether")$c.index
cindex.adjust<-c()
for(i in 1:500){
cindex.adjust[i]<-concordance.index(x=1/as.numeric(sample(pred)), surv.time=Y.test, surv.event=delta.test, method="noether")$c.index
}
cindex.PMBC.test<-(cindex.PMBC.test-mean(cindex.adjust))/(1-mean(cindex.adjust))
R2.gene.test.PMBC<-c()
for(i in 1:ncol(X.test)){
data1<-data.frame(gene=X.test[,i],cluster=as.factor(cluster.test))
res.lm <- lm(gene ~ cluster, data = data1)
RSS<-sum(res.lm$residuals^2)
res.lm <- lm(gene ~ 1, data = data1)
TSS<-sum(res.lm$residuals^2)
R2.gene.test.PMBC[i]<-1-RSS/TSS
}
R2.gene.test.PMBC<-R2.gene.test.PMBC[select.feature]
p7 <- annotate_figure(p7,top = text_grob(""))
p8 <- annotate_figure(p8,top = text_grob(""))
print("finish PMBC plot")
group<-c(rep("ogClust_WJL",length(R2.gene.wcs)),
rep("ogClust_GM",length(R2.gene.GM)),
rep("skmeans",length(R2.gene.SKM)),
rep("PMBC",length(R2.gene.PMBC)))
group<-factor(group,levels=c("ogClust_WJL","ogClust_GM","skmeans","PMBC"))
df<-data.frame(stat=c(R2.gene.wcs,R2.gene.GM, R2.gene.SKM,R2.gene.PMBC),group=group)
p9 <- ggplot(df, aes(x=group,y=stat)) + xlab("")+ylab("R2(genes)")+theme_bw()+coord_cartesian(ylim = c(0,1))+
geom_boxplot(fill="gray",lwd=1)+theme(legend.position = "right",
plot.title = element_text(size = rel(2), hjust = 0.5),
axis.title = element_text(size = 40,face="bold"),axis.text = element_text(size=25,face = "bold"),
legend.text = element_text(size=25),panel.border = element_rect(colour = "black",size=2),
axis.text.x = element_text(angle = 25, vjust = 1, hjust=1))+
scale_x_discrete(labels=c("ogClust_WJL" = expression(ogClust[WJL]), "ogClust_GM" = expression(ogClust[GM]),
"skmeans" = expression(paste("sparse ",italic(K),"-means")),
"PMBC"="PMBC"))
group<-c(rep("ogClust_WJL",length(R2.gene.test.wcs)),
rep("ogClust_GM",length(R2.gene.test.GM)),
rep("skmeans",length(R2.gene.test.SKM)),
rep("PMBC",length(R2.gene.test.PMBC)))
group<-factor(group,levels=c("ogClust_WJL","ogClust_GM","skmeans","PMBC"))
df<-data.frame(stat=c(R2.gene.test.wcs, R2.gene.test.GM, R2.gene.test.SKM,R2.gene.test.PMBC),group=group)
p10 <- ggplot(df, aes(x=group,y=stat)) + xlab("")+ylab("R2(genes)")+theme_bw()+coord_cartesian(ylim = c(0,1))+
geom_boxplot(fill="gray",lwd=1)+theme(legend.position = "right",
plot.title = element_text(size = rel(2), hjust = 0.5),
axis.title = element_text(size = 40,face="bold"),axis.text = element_text(size=25,face = "bold"),
legend.text = element_text(size=25),panel.border = element_rect(colour = "black",size=2),
axis.text.x = element_text(angle = 25, vjust = 1, hjust=1))+
scale_x_discrete(labels=c("ogClust_WJL" = expression(ogClust[WJL]), "ogClust_GM" = expression(ogClust[GM]),
"skmeans" = expression(paste("sparse ",italic(K),"-means")),
"PMBC"="PMBC"))
p9 <- annotate_figure(p9,top = text_grob("(I) outcome separation (discovery)",face = "bold", size = 20 ))
p10 <- annotate_figure(p10,top = text_grob("(J) outcome separation (validation)",face = "bold", size = 20 ))
print("finish R2_genes plot")
res.data=data.frame(F.stat=c(F.WJL,F.GM,F.SKM,F.PMBC),
pval=c(p.WJL,p.GM,p.SKM,p.PMBC),
cindex=c(cindex.WJL,cindex.GM,cindex.SKM,cindex.PMBC),
R2.gene=c(mean(R2.gene.wcs),mean(R2.gene.GM),mean(R2.gene.SKM),mean(R2.gene.PMBC)),
F.stat.test=c(F.test.WJL,F.test.GM,F.test.SKM,F.test.PMBC),
pval.test=c(p.test.WJL,p.test.GM,p.test.SKM,p.test.PMBC),
cindex.test=c(cindex.WJL.test,cindex.GM.test,cindex.SKM.test,cindex.PMBC.test),
R2.gene.test=c(mean(R2.gene.test.wcs,na.rm=T),mean(R2.gene.test.GM,na.rm=T),mean(R2.gene.test.SKM,na.rm=T),mean(R2.gene.test.PMBC,na.rm=T)),
ngenes=c(num.yujia.num,num.Peng.num,num.SKM.num,num.PMBC.num),
train_time=c(as_hms(mod.WJL$train_time+tune_time),modfit$train_time.GM,modfit$train_time.SKM,modfit$train_time.PMBC))
rownames(res.data)=c("ogClustWJL","ogClust","SKM","PMBC")
return(list(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,res.data))
}
#####Generate Figure IV #######
plotlist=readIN.survEXT(sc=FALSE, ngenes=400,tune_time = tuneweight.res$tune_time)
plot.WJL <- ggarrange(plotlist[[1]], plotlist[[2]], nrow=2)
plot.GM <- ggarrange(plotlist[[3]],plotlist[[4]],nrow=2)
plot.SKM<-ggarrange(plotlist[[5]],plotlist[[6]],nrow=2)
plot.PMBC<-ggarrange(plotlist[[7]], plotlist[[8]],nrow=2)
plotlist[[11]]
plot_combined<-grid.arrange(arrangeGrob(plot.GM,
plot.WJL,
plot.SKM,
plot.PMBC,
ncol=4),heights=c(10, 1))
file.name<-paste("FigureIV.png")
ggsave(plot_combined,filename = file.name, width = 70, height = 40, units = "cm")
plotlist=readIN.survEXT(sc=FALSE, ngenes=300,tune_time = tuneweight.res$tune_time)
plot.WJL <- ggarrange(plotlist[[1]], plotlist[[2]], nrow=2)
plot.GM <- ggarrange(plotlist[[3]],plotlist[[4]],nrow=2)
plot.SKM<-ggarrange(plotlist[[5]],plotlist[[6]],nrow=2)
plot.PMBC<-ggarrange(plotlist[[7]], plotlist[[8]],nrow=2)
plotlist[[11]]
plot_combined<-grid.arrange(arrangeGrob(plot.GM,
plot.WJL,
plot.SKM,
plot.PMBC,
ncol=4),heights=c(10, 1))
file.name<-paste("SupplementFigureVI_IIGMlasso.png")
ggsave(plot_combined,filename = file.name, width = 70, height = 40, units = "cm")
readIN.EXTtune=function(sc=FALSE,tune_time=tuneweight.lung.res$tune_time) {
load("~/OneDrive - University of Pittsburgh/AOASyujia_peng/ogclust_Wei_Wenjia/Lung_disease_data/GSE47460_1_GSE47460_2_GSE37147_GSE42057.Rdata")
g.mean<-apply(X.GSE47460_1,1,mean)
cut.mean=quantile(g.mean,probs=0.5)
X.GSE47460_1=X.GSE47460_1[g.mean>cut.mean,] # remove 50% lowest mean expression genes
g.sd=apply(X.GSE47460_1,1, sd) #cv in original scale
cut.sd=quantile(g.sd,probs=0.5)
X.GSE47460_1=X.GSE47460_1[g.sd>=cut.sd,] # further remove 50% lowest variance genes
dim(X.GSE47460_1) #3240  331
X.GSE47460_1<-t(X.GSE47460_1)
X.GSE47460_1<-scale(X.GSE47460_1)
Z.GSE47460_1<-as.matrix(Z.GSE47460_1)
Z.GSE47460_1[,1]<-(Z.GSE47460_1[,1]-mean(Z.GSE47460_1[,1]))/sd(Z.GSE47460_1[,1])
Y1<-scale(Y.GSE47460_1)
if (sc) {
load("mod1.SC.WJL.tune.RData")
load("mod.SC.all.tune.RData")
t.stat<-rep(NA,ncol(X.GSE47460_1))
for(i in 1:ncol(X.GSE47460_1)){
data<-data.frame(y=Y1,x=X.GSE47460_1[,i])
mod<-lm(y ~ x, data = data)
mod<-summary(mod)
t.stat[i]<-mod$coefficients[2,3]
}
Index<-order(abs(t.stat),decreasing = T)
X.GSE47460_1<-X.GSE47460_1[,Index[1:(ncol(X.GSE47460_1)/2)]] #331 1620
X.GSE47460_2=t(X.GSE47460_2)
X.GSE47460_2=X.GSE47460_2[,match(colnames(X.GSE47460_1),colnames(X.GSE47460_2))] #dim 87 1620
X.GSE47460_2<-scale(X.GSE47460_2)
Z.GSE47460_2<-as.matrix(Z.GSE47460_2)
Z.GSE47460_2[,1]<-(Z.GSE47460_2[,1]-mean(Z.GSE47460_2[,1]))/sd(Z.GSE47460_2[,1])
Y2<-scale(Y.GSE47460_2)
X.GSE37147=t(X.GSE37147)
X.GSE37147=X.GSE37147[,match(colnames(X.GSE47460_1),colnames(X.GSE37147))] #dim 87 1620
X.GSE37147<-scale(X.GSE37147)
Z.GSE37147<-as.matrix(Z.GSE37147)
Z.GSE37147[,1]<-(Z.GSE37147[,1]-mean(Z.GSE37147[,1]))/sd(Z.GSE37147[,1])
Y3<-scale(Y.GSE37147)
}
else {
load("mod1.WJL.tune.RData")
load("mod.allGMlasso.tune.RData")
X.GSE47460_2=t(X.GSE47460_2)
X.GSE47460_2=X.GSE47460_2[,match(colnames(X.GSE47460_1),colnames(X.GSE47460_2))] #dim 87 1620
X.GSE47460_2<-scale(X.GSE47460_2)
Z.GSE47460_2<-as.matrix(Z.GSE47460_2)
Z.GSE47460_2[,1]<-(Z.GSE47460_2[,1]-mean(Z.GSE47460_2[,1]))/sd(Z.GSE47460_2[,1])
Y2<-scale(Y.GSE47460_2)
X.GSE37147=t(X.GSE37147)
X.GSE37147=X.GSE37147[,match(colnames(X.GSE47460_1),colnames(X.GSE37147))] #dim 87 1620
X.GSE37147<-scale(X.GSE37147)
Z.GSE37147<-as.matrix(Z.GSE37147)
Z.GSE37147[,1]<-(Z.GSE37147[,1]-mean(Z.GSE37147[,1]))/sd(Z.GSE37147[,1])
Y3<-scale(Y.GSE37147)
}
plotlist=EXTplot.gen(X=X.GSE47460_1,Y=Y1,Z=Z.GSE47460_1,mod.WJL=mod.WJL,modfit=modfit,ngenes=ngenes,K=3,
X.test1=X.GSE47460_2,Z.test1=Z.GSE47460_2,X.test2=X.GSE37147,Z.test2=Z.GSE37147,
Y.test1=Y2,Y.test2=Y3,tune_time=tune_time)
return(plotlist)
}
plotlist=readIN.EXTtune(sc=FALSE, tune_time=tuneweight.lung.res$tune_time)
library(rlist)
load("mod1.WJL.tune.RData")
readIN.survEXTtune=function(sc=FALSE,tune_time=tuneweight.res$tune_time) {
load("~/OneDrive - University of Pittsburgh/AOASyujia_peng/ogclust_Wei_Wenjia/TNBC/Data.Metabric.after.Combat_TNBC.Rdata")
X.train<-Data.Metabric.after.Combat$Expression #dim 275 18964
Y.train<-Data.Metabric.after.Combat$OS
delta.train<-Data.Metabric.after.Combat$OS.event
Z.train<-Data.Metabric.after.Combat$covariate
Z.train<-as.matrix(Z.train[,1])
Index.Mean<-order(apply(X.train,2,mean),decreasing = T)
X.train<-X.train[,Index.Mean[1:(ncol(X.train)/2)]] #dim 275 9482
Index.Sd<-order(apply(X.train,2,sd),decreasing = T)
X.train<-X.train[,Index.Sd[1:(ncol(X.train)/2)]]
X.train<-scale(X.train) #dim 275 4741
if (sc) {
load("survmod1.SC.WJL.tune.RData")
load("survmod.SC.all.tune.RData")
t.stat<-rep(NA,ncol(X.train))
for(i in 1:ncol(X.train)){
data<-data.frame(y=Y.train,x=X.train[,i],delta=delta.train)
mod<-coxph(Surv(y, delta) ~ x, data = data)
mod<-summary(mod)
t.stat[i]<-mod$coefficients[1,5]
}
index<-order(abs(t.stat),decreasing = F)[1:(ncol(X.train)/2)]
select.feature<-ifelse(1:ncol(X.train)%in%index,1,0)
gene.list<-colnames(X.train)[which(select.feature==1)]
index<-match(gene.list,colnames(X.train))
X.train<-X.train[,index]
}
else {
load("survmod1.WJL.tune.RData")
load("survmod.all.tune.RData")
load("survmod.allGMlasso.tune.RData")
}
load("~/OneDrive - University of Pittsburgh/AOASyujia_peng/ogclust_Wei_Wenjia/TNBC/Data.ScanB.after.Combat_TNBC.Rdata")
X.test<-Data.ScanB.after.Combat$Expression
Y.test<-Data.ScanB.after.Combat$OS
delta.test<-Data.ScanB.after.Combat$OS.event
Z.test<-Data.ScanB.after.Combat$covariate
Z.test<-as.matrix(Z.test$Age)
X.test<-scale(X.test)
index<-match(colnames(X.train),colnames(X.test))
X.test<-X.test[,index]
index<-which(apply(X.test,2,function(x){sum(is.na(x))})!=0)
X.test[,index]<-0
plotlist=survEXTplot.gen(X=X.train,Y=Y.train,Z=Z.train,delta.train=delta.train,mod.WJL=mod.WJL,modfit=modfit,ngenes=ngenes,K=2,
X.test=X.test,Z.test=Z.test,Y.test=Y.test,delta.test=delta.test,tune_time=tune_time)
return(plotlist)
}
readIN.survEXTtune=function(sc=FALSE,tune_time=tuneweight.res$tune_time) {
load("~/OneDrive - University of Pittsburgh/AOASyujia_peng/ogclust_Wei_Wenjia/TNBC/Data.Metabric.after.Combat_TNBC.Rdata")
X.train<-Data.Metabric.after.Combat$Expression #dim 275 18964
Y.train<-Data.Metabric.after.Combat$OS
delta.train<-Data.Metabric.after.Combat$OS.event
Z.train<-Data.Metabric.after.Combat$covariate
Z.train<-as.matrix(Z.train[,1])
Index.Mean<-order(apply(X.train,2,mean),decreasing = T)
X.train<-X.train[,Index.Mean[1:(ncol(X.train)/2)]] #dim 275 9482
Index.Sd<-order(apply(X.train,2,sd),decreasing = T)
X.train<-X.train[,Index.Sd[1:(ncol(X.train)/2)]]
X.train<-scale(X.train) #dim 275 4741
if (sc) {
load("survmod1.SC.WJL.tune.RData")
load("survmod.SC.all.tune.RData")
t.stat<-rep(NA,ncol(X.train))
for(i in 1:ncol(X.train)){
data<-data.frame(y=Y.train,x=X.train[,i],delta=delta.train)
mod<-coxph(Surv(y, delta) ~ x, data = data)
mod<-summary(mod)
t.stat[i]<-mod$coefficients[1,5]
}
index<-order(abs(t.stat),decreasing = F)[1:(ncol(X.train)/2)]
select.feature<-ifelse(1:ncol(X.train)%in%index,1,0)
gene.list<-colnames(X.train)[which(select.feature==1)]
index<-match(gene.list,colnames(X.train))
X.train<-X.train[,index]
}
else {
load("survmod1.WJL.tune.RData")
#load("survmod.all.tune.RData")
load("survmod.allGMlasso.tune.RData")
}
load("~/OneDrive - University of Pittsburgh/AOASyujia_peng/ogclust_Wei_Wenjia/TNBC/Data.ScanB.after.Combat_TNBC.Rdata")
X.test<-Data.ScanB.after.Combat$Expression
Y.test<-Data.ScanB.after.Combat$OS
delta.test<-Data.ScanB.after.Combat$OS.event
Z.test<-Data.ScanB.after.Combat$covariate
Z.test<-as.matrix(Z.test$Age)
X.test<-scale(X.test)
index<-match(colnames(X.train),colnames(X.test))
X.test<-X.test[,index]
index<-which(apply(X.test,2,function(x){sum(is.na(x))})!=0)
X.test[,index]<-0
plotlist=survEXTplot.gen(X=X.train,Y=Y.train,Z=Z.train,delta.train=delta.train,mod.WJL=mod.WJL,modfit=modfit,ngenes=ngenes,K=2,
X.test=X.test,Z.test=Z.test,Y.test=Y.test,delta.test=delta.test,tune_time=tune_time)
return(plotlist)
}
plotlist=readIN.survEXTtune(sc=FALSE, tune_time=tuneweight.res$tune_time)
plotlist[[11]]
plot.WJL <- ggarrange(plotlist[[1]], plotlist[[2]], nrow=2)
plot.GM <- ggarrange(plotlist[[3]],plotlist[[4]],nrow=2)
plot.SKM<-ggarrange(plotlist[[5]],plotlist[[6]],nrow=2)
plot.PMBC<-ggarrange(plotlist[[7]], plotlist[[8]],nrow=2)
plot_combined<-grid.arrange(arrangeGrob(plot.GM,
plot.WJL,
plot.SKM,
plot.PMBC,
ncol=4),heights=c(10, 1))
file.name<-paste("SupplementFigureVI_IGMlasso.png")
ggsave(plot_combined,filename = file.name, width = 70, height = 40, units = "cm")
pwd
getwd()
setwd("/Users/wenjia/Library/CloudStorage/OneDrive-UniversityofPittsburgh/ogClust")
library(devtools)
library(roxygen2)
rm(list=ls())
library(devtools)
library(roxygen2)
setwd("/Users/wenjia/Library/CloudStorage/OneDrive-UniversityofPittsburgh/ogClust")
use_r("ogClust_GM_LDA")
use_r("ogClust_GM_LDA_surv")
getwd()
document()
load_all()
check()
document()
load_all()
check()
build()
use_r("ogClust_GM_LDA_Surv")
document()
document()
load_all()
check()
document()
load_all()
check()
build()
data('Data.Metabric')
G=Data.Metabric$Expression
X=as.matrix(Data.Metabric$covariate[,1])
Y=Data.Metabric$OS
delta<-Data.Metabric$OS.event
Index.Mean<-order(apply(G,2,mean),decreasing = T)
G <- G[,Index.Mean[1:(ncol(G)/2)]]
Index.Sd<-order(apply(G,2,sd),decreasing = T)
G<-G[,Index.Sd[1:(ncol(G)/2)]]
G<-scale(G)
K=2
lambda=0.007
dim(G)
fit.res<-ogClust_GM.LDA.Surv(K=K,lambda=lambda,delta = delta, G=G, Y=Y, X=X)
table(fit.res$grp_assign)
names(fit.res)
table(fit.res$label)
head(fit.res$Y_prd)
head(fit.res$par)
dim(fit.res$par)
dim(X)
data('GSE47460_GPL14550')
G=GSE47460_GPL14550$Expression
X=GSE47460_GPL14550$Covariates
Y=GSE47460_GPL14550$outcome
g.mean<-apply(G,1,mean)
cut.mean=quantile(g.mean,probs=0.5)
G=G[g.mean>cut.mean,]
g.sd=apply(G,1, sd)
cut.sd=quantile(g.sd,probs=0.5)
G=G[g.sd>=cut.sd,]
G<-t(G)
G<-scale(G)
K=3
lambda=0.001
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
which.max(c(3,3,2))
which.max(c(3,3,2,NA))
lambda=0.01
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
EM.LDA <- function(lambda, G, Y, X, K, max_iter=200) {
np=ncol(X)
n=nrow(G)
mod.kmeans<-kmeans(G,centers = K,nstart = 50)
cluster<-mod.kmeans$cluster
beta0_int=c()
for (k in 1:K) {
index1<-which(cluster==k)
data1<-data.frame(y=Y[index1],X[index1,])
mod1<-lm(y~.,data=data1)
mod1<-summary(mod1)
beta0_int=c(beta0_int,mod1$coefficients[1,1])
}
data<-data.frame(y=Y,X)
mod<-lm(y~.,data=data)
mod<-summary(mod)
beta_int<-mod$coefficients[2:(np+1),1]
sigma2_int<-1
class_label=cluster
out <- PenalizedLDA(G,class_label,xte=G,lambda=lambda,K=(K-1))
PLDAlist=Classify(out$xproj,out$xteproj,class_label)
theta= c(beta_int, beta0_int, sigma2_int,as.numeric(t(PLDAlist$mus)))
l = 1
repeat {
#print(l)
beta_old = theta[1:np]
miu_old = theta[(np + 1):(np + K)]
sigma2_old = theta[(np + K + 1)]
# ==E-STEP==#
f_old <- sapply(1:K, function(x) (1/sqrt(2 * pi * sigma2_old)) * exp(-(Y - miu_old[x] - X %*% beta_old)^2/(2 * sigma2_old)))
pai_old=PLDAlist$pi_est #n by K
pai_old[which(is.na(pai_old))]=1
# calculate the expected value of Z
w_old = sapply(1:K, function(k) (pai_old[, k] * f_old[, k])/diag(pai_old %*% t(f_old)))
# ==M-STEP==#
label_new=apply(w_old,1,which.max)
print(dim(w_old))
print(head(w_old))
print(head(label_new))
#print(table(label_new))
if (length(table(label_new))==K) {
class_label=label_new
out <- PenalizedLDA(G,class_label,xte=G,lambda=lambda,K=(K-1))
PLDAlist=Classify(out$xproj,out$xteproj,class_label)
}
miu_new = sapply(1:K, function(k) {
sum(w_old[, k] * (Y - X %*% beta_old), na.rm = T)/sum(w_old[, k], na.rm = T)
})
# update beta
beta_new <- beta_old
for (i in 1:np) {
beta_new[i] <- sum(sapply(1:K, function(k) w_old[, k] * X[, i] * (Y - miu_new[k] - X[, -i, drop = F] %*% beta_new[-i])), na.rm = T)/sum(w_old *X[, i]^2, na.rm = T)
}
# update sigma2
sigma2_new = sum(sapply(1:K, function(k) w_old[, k] * (Y - miu_new[k] - X %*% beta_new)^2), na.rm = T)/n
theta_new = c(beta_new, miu_new, sigma2_new,as.numeric(t(PLDAlist$mus)))
dis = sqrt(sum((theta_new - theta)^2, na.rm = T))
theta = theta_new
l = l + 1
if (dis < 1 * 10^(-6) | l > max_iter) {
break
}
}
return(list(theta=theta,label=class_label))
}
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
document()
load_all()
check()
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
wwhich.max(x(NaN,NaN,NaN))
which.max(x(NaN,NaN,NaN))
which.max(c(NaN,NaN,NaN))
t=list(a=1,b=2,c=which.max(c(NaN,NaN,NaN)))
t
sapply(t,length)
is.null(t)
sapply(t,is.null)
unlist(t)
as.vector(t)
t[[sapply(t,function(i) length(i)==0)]]=sample(1:K,1)
sample(1:K,1)
=sample(1:K,1)
sapply(t,function(i) length(i)==0)
which(sapply(t,function(i) length(i)==0))
t[[which(sapply(t,function(i) length(i)==0))]]=sample(1:K,1)
t
document()
load_all()
check()
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
t
t=list(a=1,b=2,c=which.max(c(NaN,NaN,NaN)))
t
t[which(sapply(t,function(i) length(i)==0))]
t[which(sapply(t,function(i) length(i)==0))]=2
t
document(); load_all(); check();
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
t=list(a=1,b=2,c=which.max(c(NaN,NaN,NaN)),d=which.max(c(NaN,NaN,NaN))
)
t
t[which(sapply(t,function(i) length(i)==0))]
t[which(sapply(t,function(i) length(i)==0))]=2
t
t=list(a=1,b=2,c=which.max(c(NaN,NaN,NaN)),d=which.max(c(NaN,NaN,NaN))
)
t
t[[which(sapply(t,function(i) length(i)==0))]]=c(2,3)
t[which(sapply(t,function(i) length(i)==0))]=c(2,3)
t
document(); load_all(); check()
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
document(); load_all(); check()
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
names(fit.res)
table(fit.res$grp_assign)
dim(X)
151 + 93 + 87
fit.res$lambda
lambda=0.001
fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
fit.res$lambda
table(fit.res$grp_assign)
data('Data.Metabric')
G=Data.Metabric$Expression
X=as.matrix(Data.Metabric$covariate[,1])
Y=Data.Metabric$OS
delta<-Data.Metabric$OS.event
Index.Mean<-order(apply(G,2,mean),decreasing = T)
G <- G[,Index.Mean[1:(ncol(G)/2)]]
Index.Sd<-order(apply(G,2,sd),decreasing = T)
G<-G[,Index.Sd[1:(ncol(G)/2)]]
G<-scale(G)
K=2
lambda=0.007
fit.res<-ogClust_GM.LDA.Surv(K=K,lambda=lambda,delta = delta, G=G, Y=Y, X=X)
table(fit.res$grp_assign)
dim(X)
111+164
build()

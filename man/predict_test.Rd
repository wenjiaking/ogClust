% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_WJL.R
\name{predict_test}
\alias{predict_test}
\title{Get the predicted cluster label and predicted outcome using the gene expression of validation dataset and the ogClust_WJL model from training data}
\usage{
predict_test(mod, K, D.test, X1, p = p)
}
\arguments{
\item{mod}{ogClust model from discovery/training data, generated by ogClust() or ogClust.surv()}

\item{K}{Number of clusters}

\item{D.test}{Gene expression of validation/testing data (n*p matrix)}

\item{X1}{covariate matrix of discovery/training data (n*q matrix)}

\item{p}{number of genes}
}
\value{
a list with five components
\itemize{
\item{y.pred: }{predicted outcome using soft assignment}
\item{clus: }{predicted cluster label}
\item{index: }{Indicate the position of informative genes in the training model}
\item{Y.hard: }{predicted outcome using hard assignment}
\item{z_est: }{predicted cluster probability (n*K matrix)}
}
}
\description{
Get the predicted cluster label and predicted outcome using the gene expression of validation dataset and the ogClust_WJL model from training data
}
\examples{
\dontrun{
#input the weight and lambda
s_G<-200
w<-0.727
w<-(s_G*w)/(s_G*w+1-w)
lambda<-8

#------------------------select top 2000 genes using marginal screening
t.stat<-rep(NA,nrow(GSE47460_GPL6480$expression))
for(i in 1:nrow(GSE47460_GPL6480$expression)){
 data<-data.frame(y=GSE47460_GPL6480$outcome,x=GSE47460_GPL6480$expression[i,])
 mod<-lm(y ~ x, data = data)
 mod<-summary(mod)
 t.stat[i]<-mod$coefficients[2,3]
}
Index<-order(abs(t.stat),decreasing = T)
x<-GSE47460_GPL6480$covariates
G<-GSE47460_GPL6480$expression[Index[1:2000],]
y<-GSE47460_GPL6480$outcome

#get the intial cluster center
mod.kmeans<-kmeans(t(G),centers = 3,nstart = 20)
center<-t(mod.kmeans$centers)
x<-as.matrix(x)

#implement ogClust
mod = ogClust(x=x,G=G,y=y,c_center=center,
             lambda=lambda,v_int=NULL,pi_int=NULL,K=3,max_iter=200,w_outcome=w,w_G=1-w,z_int=NULL)
#predict for the validation data
G.test<-GSE47460_GPL14550$expression
X.test<-GSE47460_GPL14550$covariates
index<-match(rownames(G),rownames(G.test))
G.test<-G.test[index,]
mod.predict<-predict_test(mod,K = 3,D.test =t(G.test),X1 =X.test, p = nrow(G))
}
}

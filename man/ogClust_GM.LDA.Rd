% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ogClust_GM_LDA.R
\name{ogClust_GM.LDA}
\alias{ogClust_GM.LDA}
\title{Title Fit ogClust_GM mixture model embedding the LDA for gene disease subtyping and with continuous outcome}
\usage{
ogClust_GM.LDA(K, lambda, G, Y, X, max_iter = 200)
}
\arguments{
\item{K}{an integer defines the number of subgroups}

\item{lambda}{the regularization tuning parameter for sparsity}

\item{G}{the matrix for omics data. The rows are samples and columns are features}

\item{Y}{the vector of a single outcome}

\item{X}{the vector of covariates}

\item{max_iter}{the maximum number of iterations of EM algorithm. Default value is 200}
}
\value{
An object with class \code{"ogClust"}
\itemize{
\item{\code{par}}{ a list of parameter estimates}
\item{\code{lambda}}{lambda}
\item{\code{Y_prd}}{ predicted outcome}
\item{\code{grp_assign}}{ prediced group assignement}
}
}
\description{
Title Fit ogClust_GM mixture model embedding the LDA for gene disease subtyping and with continuous outcome
}
\details{
The ogClust_GM.LDA is a unified latent generative model to perform clustering constructed
from omics data \code{G} with the guidance of outcome \code{Y}, and with covariate \code{X} to account for
the variability that is not related to subgrouping. A modified EM algorithm is applied for
numeric computation such that the liklihood is maximized. A posterior probability is obtain
for each subject belonging to each cluster.

Similar to ogClust_GM, ogClust_GM.LDA method performs feature selection, latent subtype characterization and outcome prediction simultaneously.
The difference is that ogClust_GM.LDA embeds the sparse linear discriminant analysis (LDA) to model gene disease subtyping.
}
\examples{
\dontrun{
  data('GSE47460_GPL14550') #load lung dataset

  # extract gene expression G, covariate X, outcome Y
  G=GSE47460_GPL14550$Expression
  X=GSE47460_GPL14550$Covariates
  Y=GSE47460_GPL14550$outcome
  g.mean<-apply(G,1,mean)
  cut.mean=quantile(g.mean,probs=0.5)
  G=G[g.mean>cut.mean,] # remove 50\% lowest mean expression genes
  g.sd=apply(G,1, sd)
  cut.sd=quantile(g.sd,probs=0.5)
  G=G[g.sd>=cut.sd,] # further remove 50\% lowest variance genes
  G<-t(G)
  G<-scale(G)
  # number of clusters
  K=3
  # tuning parameter
  lambda=0.001

  # fit ogClust_GM.LDA
  fit.res<-ogClust_GM.LDA(K=K,lambda=lambda, G=G, Y=Y, X=X)
}
}

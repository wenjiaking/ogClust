% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_WJL.R
\name{predict_WJL}
\alias{predict_WJL}
\title{Get the predicted cluster label and predicted outcome using the gene expression of validation dataset and the ogClust_WJL model from training data}
\usage{
predict_WJL(mod, K, D.test, X1, p = p)
}
\arguments{
\item{mod}{ogClust model from discovery/training data, generated by ogClust() or ogClust.surv()}

\item{K}{Number of clusters}

\item{D.test}{Gene expression of validation/testing data (n*p matrix)}

\item{X1}{covariate matrix of discovery/training data (n*q matrix)}

\item{p}{number of genes}
}
\value{
a list with five components
\itemize{
\item{y.pred: }{predicted outcome using soft assignment}
\item{clus: }{predicted cluster label}
\item{index: }{Indicate the position of informative genes in the training model}
\item{Y.hard: }{predicted outcome using hard assignment}
\item{z_est: }{predicted cluster probability (n*K matrix)}
}
}
\description{
Get the predicted cluster label and predicted outcome using the gene expression of validation dataset and the ogClust_WJL model from training data
}
\examples{
\dontrun{
data('GSE47460_GPL14550') #load lung dataset
X<-GSE47460_GPL14550$Covariates
G<-GSE47460_GPL14550$Expression
Y<-GSE47460_GPL14550$outcome

  g.mean<-apply(G,1,mean)
  cut.mean=quantile(g.mean,probs=0.5)
  G=G[g.mean>cut.mean,] # remove 50\% lowest mean expression genes
  g.sd=apply(G,1, sd)
  cut.sd=quantile(g.sd,probs=0.5)
  G=G[g.sd>=cut.sd,] # further remove 50\% lowest variance genes
  G<-t(G)
  G<-scale(G)
#initialize cluster centers:
mod.kmeans<-kmeans(G,centers = 3,nstart = 50)
center<-matrix(NA,nrow=ncol(G),ncol=3)
center[,1]<-apply(G[which(mod.kmeans[[20]]$Cs==1),],2,mean)
center[,2]<-apply(G[which(mod.kmeans[[20]]$Cs==2),],2,mean)
center[,3]<-apply(G[which(mod.kmeans[[20]]$Cs==3),],2,mean)
#input the weight and lambda
s_G<-200
w<-0.727
w<-(s_G*w)/(s_G*w+1-w)
lambda<-8
#implement ogClust_WJL
fit.res = ogClust_WJL(x=as.matrix(X),G=t(G),y=Y,c_center=center,
             lambda=lambda,v_int=NULL,pi_int=NULL,K=3,max_iter=200,w_outcome=w,w_G=1-w,z_int=NULL)
#predict for the validation data
data('GSE47460_GPL6480')
G.test<-t(GSE47460_GPL6480$Expression)
X.test<-GSE47460_GPL6480$Covariates
index<-match(colnames(G),colnames(G.test))
G.test<-G.test[,index]
mod.predict<-predict_WJL(fit.res,K = 3,D.test =G.test,X1 =X.test, p = ncol(G.test))
}
}
